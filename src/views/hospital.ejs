<!DOCTYPE html>
<html lang="pt-br" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/global.css"> 
    <link rel="stylesheet" href="/css/styleGenerico.css">
    <link rel="stylesheet" href="/css/hospital.css">
    <title>Saúde Access</title>
    <link rel="stylesheet" href="/css/protected.css">
    
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="/js/global.js"></script>
    <script src="/js/auth-utils.js" defer></script>
    <script src="/js/hospital.js" defer></script>
    
    <link rel="icon" type="image/x-icon" href="/favorite.ico">
    
    <script>
    // Define a função initMap no escopo global para o loader encontrá-la
    window.initMap = async function() {
        // O código da sua função initMap (que já está no final do <body>) 
        // será chamado automaticamente por este loader.
        // Você NÃO precisa mover seu código para cá. 
        // Apenas deixe sua função `async function initMap() { ... }` onde ela já está.
    };
    </script>
    <script 
        async 
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAvFTn2ptqkklu71dIauAqO0R1s76KiQl8&loading=async&libraries=marker,maps,geocoding&callback=initMap">
    </script>

</head>
<body class="protected">
    <header>
        <a class="voltar-btn" aria-label="Voltar">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M228,128a12,12,0,0,1-12,12H69l51.52,51.51a12,12,0,0,1-17,17l-72-72a12,12,0,0,1,0-17l72-72a12,12,0,0,1,17,17L69,116H216A12,12,0,0,1,228,128Z"></path></svg>
        </a>
        <h1><%= hospital.hospital_nome %></h1>
    </header>
    <main>
    <% if (ratings && ratings.stats) { %>
        <%
            const media_bruta = Number(ratings.stats.media_geral) || 0;
            const media_limpa = parseFloat(media_bruta.toFixed(2));
            const media_texto = (Math.floor(media_limpa * 10) / 10).toFixed(1);
            const media_classe = Math.floor(media_limpa);
        %>
        <section class="avaliacao-geral-container">
            <h2>Média Geral</h2>
            <div class="estrelas-display rating-<%= media_classe %>">
                <span class="estrela-svg"></span><span class="estrela-svg"></span><span class="estrela-svg"></span><span class="estrela-svg"></span><span class="estrela-svg"></span>
            </div>
            <span class="media-geral-numero"><%= media_texto %> / 5</span>
        </section>

        <section class="alertas-especialidades">
            <h2>Alertas da Comunidade</h2>
            
            <% if (alertas && alertas.length > 0) { %>
                <div class="alertas-container">
                    <% alertas.forEach(alerta => { %>
                        <div class="alerta-card">
                            <div class="alerta-header">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M236.8,188.09,149.35,36.22a24,24,0,0,0-42.7,0L19.2,188.09a23.93,23.93,0,0,0,21.35,35.91H215.45a23.93,23.93,0,0,0,21.35-35.91Zm-16.15,20.57a8,8,0,0,1-7.2,4.34H40.55a8,8,0,0,1-7.2-4.34,7.9,7.9,0,0,1,.45-8.81L121.25,48.14a8,8,0,0,1,13.5,0l87.45,151.87A7.9,7.9,0,0,1,220.65,208.66ZM120,144V104a8,8,0,0,1,16,0v40a8,8,0,0,1-16,0Zm20,36a12,12,0,1,1-12-12A12,12,0,0,1,140,180Z"></path></svg>
                                <h3><%= alerta.especialidade_nome %> em falta</h3>
                            </div>
                            <div class="alerta-body">
                                <p><strong><%= alerta.total_reports_falta %></strong> usuários reportaram esta especialidade como "em falta" nas últimas 72 horas.</p>
                                <p class="alerta-ultimo-report">Último reporte: <%= new Date(alerta.ultimo_report).toLocaleString('pt-BR') %></p>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } else { %>
                <p class="sem-alertas-mensagem">Não há nenhum alerta de especialidade no momento.</p>
            <% } %>
        </section>

        <section class="collapsible-section">
            <div class="collapsible-header">
                <h2>Estatísticas Gerais</h2>
                <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z"></path></svg>
            </div>
            <div class="collapsible-content">
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-numero"><%= ratings.stats.total_avaliacoes %></span>
                        <span class="stat-label">Avaliações</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-numero"><%= Number(ratings.stats.media_lotacao).toFixed(1) %>/5</span>
                        <span class="stat-label">Média Lotação</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-numero"><%= Number(ratings.stats.media_tempo_espera).toFixed(1) %>/5</span>
                        <span class="stat-label">Média Tempo</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-numero"><%= Number(ratings.stats.media_atendimento).toFixed(1) %>/5</span>
                        <span class="stat-label">Média Atendimento</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-numero"><%= Number(ratings.stats.media_infraestrutura).toFixed(1) %>/5</span>
                        <span class="stat-label">Média Infraestrutura</span>
                    </div>
                </div>
            </div>
        </section>
        
        <% if (locals.especialidades && especialidades.length > 0) { %>
            <section class="collapsible-section">
                <div class="collapsible-header">
                    <h2>Especialidades</h2>
                    <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z"></path></svg>
                </div>
                <div class="collapsible-content">
                    <ul class="especialidades-lista">
                        <% especialidades.forEach(esp => { %>
                            <li><%= esp.especialidade_nome %></li>
                        <% }); %>
                    </ul>
                </div>
            </section>
        <% } %>

    <% } else { %>
        <section class="lotacao-container">
            <h2>Informações de lotação</h2>
            <div class="sem-dados">
                <p>Não há dados de avaliação disponíveis para este hospital ainda.</p>
                <p>Seja o primeiro a avaliar!</p>
            </div>
        </section>
    <% } %>

        <section class="collapsible-section">
            <div class="collapsible-header">
                <h2>Endereço</h2>
                <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z"></path></svg>
            </div>
            <div class="collapsible-content">
                <div class="endereco-info">
                    <% if (address) { %>
                        <div id="map" style="z-index: 0;"></div>
                        <script>
                            window.hospitalLat = <%= address.latitude || 'null' %>;
                            window.hospitalLng = <%= address.longitude || 'null' %>;
                            window.hospitalNome = '<%= hospital.hospital_nome.replace(/'/g, "\\'") %>';
                            window.hospitalEndereco = '<%= (address.endereco_logradouro || "").replace(/'/g, "\\'") %>, <%= (address.endereco_numero || "").replace(/'/g, "\\'") %>';
                            window.hospitalCep = '<%= (address.endereco_cep || "").replace(/'/g, "\\'") %>';
                            window.hospitalBairro = '<%= (address.endereco_bairro || "").replace(/'/g, "\\'") %>';
                            window.enderecoParaGeocodificar = [
                                '<%= (address.endereco_logradouro || "").replace(/'/g, "\\'") %>',
                                '<%= (address.endereco_numero || "").replace(/'/g, "\\'") %>',
                                '<%= (address.endereco_bairro || "").replace(/'/g, "\\'") %>',
                                '<%= (address.endereco_cep || "").replace(/'/g, "\\'") %>'
                                ].filter(Boolean).join(', ') + ', Salvador, Bahia, Brasil';
                        </script>
                    <% } else { %>
                        <p style="margin-top: 12px; color: #666; font-size: 14px;">Localização não disponível</p>
                    <% } %>
                    
                    <div class="endereco-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M128,64a40,40,0,1,0,40,40A40,40,0,0,0,128,64Zm0,64a24,24,0,1,1,24-24A24,24,0,0,1,128,128Zm0-112a88.1,88.1,0,0,0-88,88c0,31.4,14.51,64.68,42,96.25a254.19,254.19,0,0,0,41.45,38.3,8,8,0,0,0,9.18,0A254.19,254.19,0,0,0,174,200.25c27.45-31.57,42-64.85,42-96.25A88.1,88.1,0,0,0,128,16Zm0,206c-16.53-13-72-60.75-72-118a72,72,0,0,1,144,0C200,161.23,144.53,209,128,222Z"></path></svg>
                        <div class="endereco-texto">
                            <span id="map-address-line1"><%= address.endereco_logradouro %><%= address.endereco_numero ? ', ' + address.endereco_numero : '' %></span>
                            <span id="map-address-line2"><%= address.endereco_bairro %> - CEP: <%= address.endereco_cep %></span>
                            <% if (address.endereco_complemento) { %>
                                <span class="complemento" id="map-address-complemento"><%= address.endereco_complemento %></span>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section class="collapsible-section">
            <div class="collapsible-header">
                <h2>Contato</h2>
                <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z"></path></svg>
            </div>
            <div class="collapsible-content">
                <div class="contato-info">
                    <% if (hospital_site) { %>
                    <div class="contato-site">
                        <span><strong onclick="window.open('<%= hospital_site %>', '_blank');" style="color: white;">Clique aqui para acessar o site desta instituição</strong></span>
                    </div>
                    <% } %>
                    <% if (hospital_telefone) { %>
                    <div class="contato-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M164.39,145.34a8,8,0,0,1,7.59-.69l47.16,21.13a8,8,0,0,1,4.8,8.3A48.33,48.33,0,0,1,176,216,136,136,0,0,1,40,80,48.33,48.33,0,0,1,81.92,32.06a8,8,0,0,1,8.3,4.8l21.13,47.2a8,8,0,0,1-.66,7.53L89.32,117a7.93,7.93,0,0,0-.54,7.81c8.27,16.93,25.77,34.22,42.75,42.41a7.92,7.92,0,0,0,7.83-.59Z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/></svg>
                        <span>Telefone: <strong><%= hospital_telefone %></strong></span>
                    </div>
                    <% } %>
                    <% if (hospital_email) { %>
                    <div class="contato-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM203.43,64,128,133.15,52.57,64ZM216,192H40V74.19l82.59,75.71a8,8,0,0,0,10.82,0L216,74.19V192Z"></path></svg>
                        <span>Email: <strong><%= hospital_email %></strong></span>
                    </div>
                    <% } %>
                </div>
            </div>
        </section>

        <section class="acoes-container">
            <button type="button" class="acao-btn acao-principal" onclick="window.location.href='/hospital/avaliacao?id=<%= hospital.hospital_id %>'">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#ffffff" viewBox="0 0 256 256"><path d="M234,80.12A24,24,0,0,0,216,72H160V56a40,40,0,0,0-40-40,8,8,0,0,0-7.16,4.42L75.06,96H32a16,16,0,0,0-16,16v88a16,16,0,0,0,16,16H204a24,24,0,0,0,23.82-21l12-96A24,24,0,0,0,234,80.12ZM32,112H72v88H32ZM223.94,97l-12,96a8,8,0,0,1-7.94,7H88V105.89l36.71-73.43A24,24,0,0,1,144,56V80a8,8,0,0,0,8,8h64a8,8,0,0,1,7.94,9Z"></path></svg>
                Avaliar hospital
            </button>
        </section>
    </main>
    <%- include ('partials/navbar.ejs')%>

    <script>
        let map;

        /**
         * Atualiza os spans de texto do endereço na página com os dados
         * da geocodificação do Google, que são mais precisos.
         */
        function updateDisplayedAddress(components) {
            // Função auxiliar para encontrar um componente de endereço
            const getComponent = (type) => components.find(c => c.types.includes(type))?.long_name || '';

            const rua = getComponent('route');
            const numero = getComponent('street_number');
            const bairro = getComponent('sublocality_level_1'); // 'sublocality_level_1' é geralmente o bairro
            const cep = getComponent('postal_code');

            const line1El = document.getElementById('map-address-line1');
            const line2El = document.getElementById('map-address-line2');
            const complementoEl = document.getElementById('map-address-complemento');

            // Atualiza Linha 1 (Rua, Número)
            if (line1El && (rua || numero)) {
                line1El.textContent = `${rua}${numero ? ', ' + numero : ''}`;
            }
            
            // Atualiza Linha 2 (Bairro, CEP)
            if (line2El && (bairro || cep)) {
                let line2Text = '';
                if (bairro) line2Text += bairro;
                if (cep) line2Text += ` - CEP: ${cep}`;
                line2El.textContent = line2Text;
            }

            // O complemento é do nosso DB, a geocodificação não o conhece.
            // Se atualizamos o endereço, o complemento antigo pode não fazer sentido.
            // É mais seguro escondê-lo para evitar inconsistência.
            if (complementoEl) {
                complementoEl.style.display = 'none';
                console.log('Complemento (do DB) oculto, pois o endereço foi atualizado pela geocodificação.');
            }
        }

        async function initMap() {
            const mapContainer = document.getElementById('map');
            if (!mapContainer) return;

            let positionToUse = null;
            let zoomLevel = 15;
            let attemptStatus = 'failed';
            
            let Geocoder;
            try {
                const lib = await google.maps.importLibrary("geocoding");
                Geocoder = lib.Geocoder;
            } catch (e) {
                console.error("Falha ao carregar a biblioteca de Geocoding.", e);
                mapContainer.innerHTML = '<p style="margin: 12px; color: #666; font-size: 14px;">Erro ao carregar o serviço de mapa.</p>';
                return;
            }
            
            const geocoder = new Geocoder();
            const salvadorRestrictions = {
                locality: 'Salvador',
                administrativeArea: 'BA',
                country: 'BR'
            };

            // --- PRIORIDADE 1: Pesquisar pelo NOME restrito a Salvador ---
            if (typeof window.hospitalNome !== 'undefined' && window.hospitalNome.trim().length > 0) {
                try {
                    console.log('Tentativa 1: Geocodificação por NOME:', window.hospitalNome);
                    const response = await geocoder.geocode({
                        address: window.hospitalNome,
                        componentRestrictions: salvadorRestrictions
                    });
                    
                    if (response.results && response.results[0]) {
                        let inSalvador = response.results[0].address_components.some(
                            comp => (comp.types.includes('locality') || comp.types.includes('administrative_area_level_2')) && comp.long_name === 'Salvador'
                        );

                        if (inSalvador) {
                            positionToUse = response.results[0].geometry.location;
                            zoomLevel = 17;
                            attemptStatus = 'success_name';
                            console.log('✓ PRIORIDADE 1: Localizado por NOME');

                            // ATUALIZA O ENDEREÇO EXIBIDO
                            updateDisplayedAddress(response.results[0].address_components);
                        } else {
                            console.warn('Nome encontrado, mas fora de Salvador. Ignorando.');
                        }
                    }
                } catch (e) {
                    console.warn('Geocodificação por NOME falhou:', e.status);
                }
            }

            // --- PRIORIDADE 2: Geocodificação do ENDEREÇO (Fallback) ---
            if (attemptStatus === 'failed' && typeof window.enderecoParaGeocodificar !== 'undefined' && window.enderecoParaGeocodificar.trim().length > 10) {
                try {
                    console.log('Tentativa 2: Geocodificação por ENDEREÇO:', window.enderecoParaGeocodificar);
                    const response = await geocoder.geocode({ 
                        address: window.enderecoParaGeocodificar,
                        componentRestrictions: salvadorRestrictions
                    });
                    
                    if (response.results && response.results[0]) {
                        positionToUse = response.results[0].geometry.location;
                        zoomLevel = 18;
                        attemptStatus = 'success_address';
                        console.log('✓ PRIORIDADE 2: Localizado por ENDEREÇO');

                        // ATUALIZA O ENDEREÇO EXIBIDO
                        updateDisplayedAddress(response.results[0].address_components);
                    }
                } catch (e) {
                    console.warn('Geocodificação por ENDEREÇO falhou:', e.status);
                }
            }

            // --- PRIORIDADE 3: Usar coordenadas do DB (Fallback) ---
            // Se cair aqui, o endereço do DB já está correto (pois é o que o EJS renderizou).
            if (attemptStatus === 'failed' && window.hospitalLat && window.hospitalLng) {
                positionToUse = { lat: window.hospitalLat, lng: window.hospitalLng };
                zoomLevel = 15;
                attemptStatus = 'success_db_coords';
                console.log('⚠ PRIORIDADE 3: Usando coordenadas do banco (imprecisas)');
            }
            
            // Se NENHUMA localização foi encontrada
            if (!positionToUse || attemptStatus === 'failed') {
                mapContainer.innerHTML = '<p style="margin: 12px; color: #666; font-size: 14px;">Localização não disponível para este hospital.</p>';
                console.error('Falha em todas as tentativas de localização.');
                return;
            }

            // --- Renderização do Mapa ---
            try {
                const { Map, InfoWindow } = await google.maps.importLibrary("maps");
                const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

                map = new Map(mapContainer, {
                    zoom: zoomLevel,
                    center: positionToUse,
                    mapId: 'SAUDE_ACCESS_MAP_ID'
                });
                
                // O popup do mapa usará as variáveis globais, que são o "pior caso" (do DB).
                // Vamos atualizá-las se tivermos um endereço melhor.
                // Usaremos o texto dos spans que acabamos de atualizar.
                const displayAddressLine1 = document.getElementById('map-address-line1')?.textContent || '';
                const displayAddressLine2 = document.getElementById('map-address-line2')?.textContent || '';

                const popupHtml = `
                    <div style="font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;">
                        <b style="font-size: 16px;">${window.hospitalNome || 'Hospital'}</b>
                        <br>
                        ${displayAddressLine1}
                        <br>
                        ${displayAddressLine2.replace(' - CEP: ', '<br>CEP: ')}
                    </div>`;

                const infoWindow = new InfoWindow({
                    content: popupHtml,
                    ariaLabel: window.hospitalNome,
                });

                const marker = new AdvancedMarkerElement({
                    map: map,
                    position: positionToUse,
                    title: window.hospitalNome,
                });

                marker.addListener("click", () => {
                    infoWindow.open({
                        anchor: marker,
                        map,
                    });
                });

                const enderecoSection = document.querySelectorAll('.collapsible-section')[2];
                if (enderecoSection) {
                    const observer = new MutationObserver(() => {
                        if (enderecoSection.classList.contains('open')) {
                            setTimeout(() => {
                                google.maps.event.trigger(map, 'resize');
                                map.setCenter(positionToUse);
                            }, 100); 
                        }
                    });
                    observer.observe(enderecoSection, { attributes: true, attributeFilter: ['class'] });
                }

            } catch (e) {
                console.error("Falha ao carregar a biblioteca do Google Maps (Maps/Marker).", e);
                mapContainer.innerHTML = '<p style="margin: 12px; color: #666; font-size: 14px;">Erro ao carregar o mapa. Verifique a chave de API.</p>';
            }
        }
        
        // Lógica Collapsible
        document.addEventListener('DOMContentLoaded', () => {
            const collapsibleHeaders = document.querySelectorAll('.collapsible-header');
            collapsibleHeaders.forEach(header => {
                header.addEventListener('click', () => {
                    const section = header.closest('.collapsible-section');
                    section.classList.toggle('open');
                });
            });
        });
    </script>
</body>
</html>
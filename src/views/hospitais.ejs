<!DOCTYPE html>
<html lang="pt-br" data-theme="light">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/styleGenerico.css" />
    <link rel="stylesheet" href="/css/hospitais.css" />
    <title>Saúde Access</title>
    <link rel="stylesheet" href="/css/protected.css" />
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="/js/global.js"></script>
    <script src="/js/auth-utils.js" defer></script>
</head> 
<body class="protected">
    <header>
        <h1><%= titulo %></h1>
    </header>
    <main>
        <div class="container-hospitais">
            <div class="div-butoes" id="lista-hospitais-container">
                <p>Obtendo sua localização para encontrar hospitais próximos...</p>
            </div>
        </div>
</main>
    <%- include ('partials/navbar.ejs')%>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('lista-hospitais-container');
            let hospitaisList = []; // Variável para armazenar a lista de hospitais

            function calcularDistancia(lat1, lon1, lat2, lon2) {
                if ((lat1 == lat2) && (lon1 == lon2)) return 0;
                const radlat1 = Math.PI * lat1/180;
                const radlat2 = Math.PI * lat2/180;
                const theta = lon1-lon2;
                const radtheta = Math.PI * theta/180;
                let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
                if (dist > 1) dist = 1;
                dist = Math.acos(dist);
                dist = dist * 180/Math.PI;
                dist = dist * 60 * 1.1515 * 1.609344;
                return dist.toFixed(1);
            }

            // Função para RENDERIZAR a lista na tela
            function renderizarHospitais(userLat, userLng) {
                if (hospitaisList.length === 0) return;

                // 1. Recalcula a distância para cada hospital
                hospitaisList.forEach(hospital => {
                    hospital.distancia = calcularDistancia(
                        userLat, userLng,
                        hospital.HOSPITAL_LATITUDE, hospital.HOSPITAL_LONGITUDE
                    );
                });
                
                // 2. Reordena a lista pela nova distância
                hospitaisList.sort((a, b) => parseFloat(a.distancia) - parseFloat(b.distancia));
                
                // 3. Limpa o container e exibe a lista atualizada
                container.innerHTML = '';
                hospitaisList.forEach(hospital => {
                    const hospitalElement = `
                        <a href="/hospital?id=${hospital.HOSPITAL_ID}" class="botao-hospital">
                            <span class="botao-hospital-distancia">${hospital.distancia} km</span>
                            <span class="botao-hospital-nome">${hospital.HOSPITAL_NOME}</span>
                        </a>
                    `;
                    container.innerHTML += hospitalElement;
                });
            }

            // Função para BUSCAR os hospitais da API (só executa uma vez)
            async function buscarHospitais() {
                try {
                    const response = await fetch('/api/showH');
                    if (!response.ok) throw new Error(`Falha na rede: ${response.statusText}`);
                    
                    hospitaisList = await response.json(); // Armazena na variável global
                    container.innerHTML = '<p>Localização encontrada! Calculando distâncias...</p>';

                } catch (error) {
                    container.innerHTML = `<p style="color: red;">Erro ao buscar hospitais: ${error.message}</p>`;
                }
            }

            // Início do processo
            if (navigator.geolocation) {
                // Mensagem inicial
                container.innerHTML = '<p>Obtendo sua localização para encontrar hospitais próximos...</p>';
                
                // Busca a lista de hospitais da API assim que a página carrega
                buscarHospitais();

                // Usa watchPosition para "observar" a localização
                navigator.geolocation.watchPosition(
                    (position) => {
                        // SUCESSO: A localização mudou!
                        const { latitude, longitude } = position.coords;
                        // Chama a função para recalcular e renderizar a lista
                        renderizarHospitais(latitude, longitude);
                    },
                    (error) => {
                        // ERRO
                        container.innerHTML = '<p>Não foi possível obter sua localização. Habilite o serviço de localização no seu navegador.</p>';
                    },
                    {
                        // Opções para alta precisão (útil para movimento)
                        enableHighAccuracy: true,
                        maximumAge: 10000, // Idade máxima do cache da posição
                        timeout: 5000     // Tempo máximo para obter a posição
                    }
                );
            } else {
                container.innerHTML = '<p>Geolocalização não é suportada por este navegador.</p>';
            }
        });
    </script>
</body>
</html>
// public/js/auth.js
let supabase = null

// Inicializar Supabase com configura√ß√µes do servidor
async function initSupabase() {
    try {
        const response = await fetch('/api/config')
        const config = await response.json()
        
        supabase = window.supabase.createClient(config.supabaseUrl, config.supabaseAnonKey)
        console.log('‚úÖ Supabase inicializado')
        return true
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Supabase:', error)
        return false
    }
}

// Verificar se usu√°rio est√° logado
async function verificarSessao() {
    if (!supabase) {
        console.log('üîß Supabase n√£o inicializado, inicializando...')
        const initialized = await initSupabase()
        if (!initialized) {
            console.error('‚ùå Falha ao inicializar Supabase')
            return false
        }
    }
    
    try {
        console.log('üîç Verificando sess√£o...')
        const { data: { session }, error } = await supabase.auth.getSession()
        
        if (error) {
            console.error('‚ùå Erro ao verificar sess√£o:', error)
            return false
        }
        
        if (session) {
            console.log('‚úÖ Sess√£o encontrada:', session.user.email)
            console.log('‚è∞ Sess√£o expira em:', new Date(session.expires_at * 1000).toLocaleString())
            return true
        } else {
            console.log('‚ùå Nenhuma sess√£o encontrada')
            return false
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico na verifica√ß√£o:', error)
        return false
    }
}

// Proteger p√°gina atual
async function protegerPagina() {
    console.log('üîç Verificando autentica√ß√£o...')
    
    const isAuthenticated = await verificarSessao()
    
    if (!isAuthenticated) {
        console.log('‚ùå Usu√°rio n√£o autenticado, redirecionando para login...')
        window.location.href = '/login'
        return false
    }
    
    console.log('‚úÖ Usu√°rio autenticado')
    // Mostrar o conte√∫do original
    document.body.classList.add('authenticated')
    return true
}

// Obter informa√ß√µes do usu√°rio
async function obterUsuario() {
    if (!supabase) await initSupabase()
    
    const { data: { session } } = await supabase.auth.getSession()
    return session?.user || null
}

// Fazer logout
async function logout() {
    if (!supabase) await initSupabase()
    
    try {
        await supabase.auth.signOut()
        window.location.href = '/login'
    } catch (error) {
        console.error('Erro no logout:', error)
        // For√ßar redirect mesmo com erro
        window.location.href = '/login'
    }
}

// Preencher informa√ß√µes do usu√°rio na p√°gina
async function preencherInfoUsuario() {
    const user = await obterUsuario()
    if (user) {
        // Preencher elementos com classe 'user-email'
        document.querySelectorAll('.user-email').forEach(el => {
            el.textContent = user.email
        })
        
        // Preencher elementos com classe 'user-name'
        document.querySelectorAll('.user-name').forEach(el => {
            el.textContent = user.user_metadata?.name || user.email.split('@')[0]
        })
    }
}

// Auto-executar prote√ß√£o se a p√°gina tiver a classe 'protected'
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ P√°gina carregada, verificando prote√ß√£o...')
    
    if (document.body.classList.contains('protected')) {
        console.log('üõ°Ô∏è P√°gina marcada como protegida')
        
        // Aguardar inicializa√ß√£o do Supabase
        await new Promise(resolve => setTimeout(resolve, 100))
        
        const isAuthenticated = await protegerPagina()
        if (isAuthenticated) {
            console.log('‚úÖ Usu√°rio autenticado, preenchendo informa√ß√µes...')
            await preencherInfoUsuario()
        }
    } else {
        console.log('‚ÑπÔ∏è P√°gina n√£o protegida')
    }
})

// Remover esta linha que estava causando problema
// if (document.body && document.body.classList.contains('protected')) {
//     document.body.style.visibility = 'hidden'
// }

// Exportar fun√ß√µes para uso global
window.protegerPagina = protegerPagina
window.logout = logout
window.obterUsuario = obterUsuario